from aiogram.filters.command import Command
from aiogram import types, Router, F
from aiogram.types import ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from pybots.user_bot import insert_user, insert_phone_numbers, insert_birthday, create_card, select_card_information, \
    check_users
from keyboards import user_keyboards, admin_keyboards
from state.user_state import Registration
from state.admin_state import AdminState
from pybots.admin_bot import select_user, update_bonus, check_ttl_gift_bonus, check_super_adm, super_find_user, \
    select_all_users
from crossover import user_bot
import re
from datetime import datetime
import time

router = Router()


@router.message(Command("start"))
async def user_start(message: types.Message):
    user_inf = check_users(message.from_user.id)
    if user_inf[0]:
        if not user_inf[1]:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}!", reply_markup=user_keyboards.kb_information)
        else:
            await message.answer(f"–ü—Ä–∏–≤–µ—Ç {message.from_user.full_name}!\n"
                                 f"–¢—ã –∏–º–µ–µ—à—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!", reply_markup=admin_keyboards.kb_find)
    else:
        await message.answer(
            f"–ü—Ä–∏–≤–µ—Ç, {message.from_user.full_name}, —è –Ω–µ –Ω–∞—à–µ–ª —Ç–µ–±—è —É –Ω–∞—Å –≤ —Å–∏—Å—Ç–µ–º–µ, –Ω–µ —Ö–æ—á–µ—à—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è, "
            f"—á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ –±–æ–Ω—É—Å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ?",
            reply_markup=user_keyboards.kb_reg)


@router.message(Command('root'))
async def adm_add_bonus(message: types.Message):
    if check_super_adm(message.from_user.id):
        await message.answer('üòé–í—ã –∏–º–µ–µ—Ç–µ –ø—Ä–∞–≤–∞ —Å—É–ø–µ—Ä –∞–¥–º–∏–Ω–∏—Å—Ç–∞—Ç–æ—Ä–∞!\n'
                             '–í—ã–±–µ—Ä–∏ –æ–ø–µ—Ä–∞—Ü–∏—é',
                             reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'admin')
async def reg_user(message: types.Message, state: FSMContext):
    await user_bot.send_message(chat_id=message.from_user.id,
                                text='üîé  –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã, –∫–æ–º—É –¥–∞—Ç—å –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞')
    await state.set_state(AdminState.get_admin)


@router.message(AdminState.get_admin)
async def admin_start2(message: types.Message, state: FSMContext):
    await state.update_data(admin=message.text)
    num = await state.get_data()
    try:
        info = select_user(num['admin'])
        gift_bonus, string = check_ttl_gift_bonus(info[5], info[6])
        roles = 'üë§<b>–Ø–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:</b> ‚úÖ\n' if info[8] else ''
        msg = f'<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</i>\n\n' \
              f'üë§<b>–ò–º—è:</b> {info[0]}\n' \
              f'üë§<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {datetime.strftime(info[7], "%d.%m.%Y")}\n' \
              f'{roles}' \
              f'üì±<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {info[1]}\n\n' \
              f'üí≥<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {info[2]}\n\n' \
              f'ü§ë<b>–ë–∞–ª–∞–Ω—Å:</b> {"%.2f" % (float(info[3] + gift_bonus))} –±–∞–ª–ª–æ–≤\n' \
              f'{string}\n'
        if info[8]:
            await message.answer(text=msg, parse_mode='HTML', reply_markup=admin_keyboards.ib_not_admin)
        else:
            await message.answer(text=msg, parse_mode='HTML', reply_markup=admin_keyboards.ib_admin)

        await state.update_data(admin=info)
    except Exception:
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text='‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã',
                                    reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'get_admin')
async def reg_user(message: types.Message, state: FSMContext):
    try:
        value = await state.get_data()
        name = value['admin'][0]
        super_find_user(value['admin'][4], True)
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text=f'‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ø–æ–ª—É—á–∏–ª –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!',
                                    reply_markup=admin_keyboards.ib_root)
    except Exception:
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text='‚ùóÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'no_admin')
async def reg_user(message: types.Message, state: FSMContext):
    try:
        value = await state.get_data()
        name = value['admin'][0]
        super_find_user(value['admin'][4], False)
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text=f'‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {name} –ª–∏—à–∏–ª—Å—è –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!',
                                    reply_markup=admin_keyboards.ib_root)
    except Exception:
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text='‚ùóÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'bonus')
async def reg_user(message: types.Message, state: FSMContext):
    await user_bot.send_message(chat_id=message.from_user.id,
                                text='üîé  –í–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã, –∫–æ–º—É –∏–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤')
    await state.set_state(AdminState.bonus)


@router.message(AdminState.bonus)
async def admin_start2(message: types.Message, state: FSMContext):
    await state.update_data(bonus=message.text)
    num = await state.get_data()
    try:
        info = select_user(num['bonus'])
        gift_bonus, string = check_ttl_gift_bonus(info[5], info[6])
        await message.answer(f'<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ:</i>\n\n'
                             f'üë§<b>–ò–º—è:</b> {info[0]}\n'
                             f'üë§<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {datetime.strftime(info[7], "%d.%m.%Y")}\n\n'
                             f'üì±<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {info[1]}\n\n'
                             f'üí≥<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {info[2]}\n\n'
                             f'ü§ë<b>–ë–∞–ª–∞–Ω—Å:</b> {"%.2f" % float(info[3])} –±–∞–ª–ª–æ–≤\n'
                             f'{string}\n',
                             parse_mode='HTML',
                             reply_markup=admin_keyboards.ib_bonus)
        await state.update_data(bonus=info)
    except Exception:
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text='‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã!',
                                    reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'set_bonus')
async def reg_user(message: types.Message, state: FSMContext):
    await user_bot.send_message(chat_id=message.from_user.id, text='‚ùóÔ∏è–í–≤–µ–¥–∏ –Ω–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤!')
    await state.set_state(AdminState.set_bonus)


@router.message(AdminState.set_bonus)
async def admin_start2(message: types.Message, state: FSMContext):
    try:
        bonus = message.text
        assert bonus.isdigit()
        value = await state.get_data()
        gift_bonus = value['bonus'][5] if value['bonus'][5] else 0
        card = value['bonus'][2]
        update_bonus(bonus, gift_bonus, card)
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text='‚ùóÔ∏è–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–æ–Ω—É—Å–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!', reply_markup=admin_keyboards.ib_root)
    except Exception:
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text='‚ùóÔ∏è–î–∞–Ω–Ω—ã–µ –≤–≤–µ–¥–µ–Ω—ã –Ω–µ–≤–µ—Ä–Ω–æ!', reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'send_msg')
async def reg_user(message: types.Message, state: FSMContext):
    await user_bot.send_message(chat_id=message.from_user.id,
                                text='üèû  –û—Ç–ø—Ä–∞–≤—å –º–Ω–µ –∫–∞—Ä—Ç–∏–Ω–∫—É –∏ —Ç–µ–∫—Å—Ç –ø–æ–¥ –Ω–µ–π!\n'
                                     '        –ï—Å–ª–∏ –∫–∞—Ä—Ç–∏–Ω–∫–∏ –Ω–µ—Ç, —Ç–æ –æ—Ç–ø—Ä–∞–≤—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç',
                                reply_markup=admin_keyboards.ib_picture)
    await state.set_state(AdminState.picture)


@router.message(AdminState.picture)
async def admin_start2(message: types.Message, state: FSMContext):
    # users = select_all_users()
    try:
        pic = message.photo[-1].file_id
        msg = message.caption
        # for user_tlgm_id in users:
        await user_bot.send_photo(chat_id=message.from_user.id,
                                  photo=pic,
                                  caption=msg)
    except Exception:
        msg = message.text
        # for user_tlgm_id in users:
        await user_bot.send_message(chat_id=message.from_user.id,
                                    text=msg)
    await user_bot.send_message(chat_id=message.from_user.id,
                                text='‚ùóÔ∏è–°–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!',
                                reply_markup=admin_keyboards.ib_root)
    await state.set_state(AdminState._pass)


@router.callback_query(F.data == 'cancel')
async def reg_user(message: types.Message):
    await user_bot.send_message(chat_id=message.from_user.id,
                                text='‚ùóÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=admin_keyboards.ib_root)


@router.callback_query(F.data == 'exit')
async def reg_user(message: types.Message, state: FSMContext):
    await user_bot.send_message(chat_id=message.from_user.id,
                                text='‚ùóÔ∏è–ü–æ–∫–∞!', reply_markup=admin_keyboards.kb_find)
    await state.set_state(AdminState._pass)


@router.message(F.text == '–ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è')
async def reg_user(message: types.Message, state: FSMContext):
    if insert_user(message.from_user.id, message.from_user.full_name):
        await message.answer('–î–∞–≤–∞–π –Ω–∞—á–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.\n'
                             '–î–ª—è –Ω–∞—á–∞–ª–∞ –ø–æ–¥–µ–ª–∏—Å—å —Å–≤–æ–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞\n'
                             '–í —Ñ–æ—Ä–º–∞—Ç–µ <i>89123456789</i>',
                             parse_mode='HTML',
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registration.phone)


@router.message(Registration.phone)
async def reg_user(message: types.Message, state: FSMContext):
    await state.update_data(phone=message.text)
    num_phone = await state.get_data()
    if re.search('^((8)+([0-9]){10})$', num_phone['phone']):
        if insert_phone_numbers(num_phone['phone'], message.from_user.id):
            await message.answer(
                '–°–ª–µ–¥—É—é—â–∏–π —à–∞–≥.\n'
                '–í–≤–µ–¥–∏ –¥–∞—Ç—É —Ä–æ–∂–¥–µ–Ω–∏—è, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∞—Ç—å –ø–æ–∑–¥—Ä–∞–≤–∏—Ç–µ–ª—å–Ω—ã–µ –±–∞–ª–ª—ã –≤ —ç—Ç–æ—Ç –¥–µ–Ω—å.\n'
                '–í —Ñ–æ—Ä–º–∞—Ç–µ <i>–¥–¥.–º–º.–≥–≥–≥–≥</i>',
                parse_mode='HTML',
                reply_markup=ReplyKeyboardRemove())
            await state.set_state(Registration.bd)
    else:
        await message.answer('‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (<i>89123456789</i>)',
                             parse_mode='HTML',
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registration.phone)


@router.message(Registration.bd)
async def reg_user(message: types.Message, state: FSMContext):
    await state.update_data(bd=message.text)
    birthday = await state.get_data()
    try:
        if time.strptime(birthday['bd'], '%d.%m.%Y'):
            dt = datetime.strptime(birthday['bd'], '%d.%m.%Y')
            if insert_birthday(str(datetime.strftime(dt, '%Y-%m-%d')), message.from_user.id):
                create_card(message.from_user.id)
                await message.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ–Ω—É—Å–Ω—É—é –ø—Ä–æ–≥—Ä–∞–º–º—É Crossover Market!',
                                     reply_markup=user_keyboards.kb_information)
                await state.set_state(Registration._pass)
    except Exception:
        await message.answer('‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç, –ø–æ–ø—Ä–æ–±—É–π –µ—â–µ —Ä–∞–∑ (<i>–¥–¥.–º–º.–≥–≥–≥–≥</i>)',
                             parse_mode='HTML',
                             reply_markup=ReplyKeyboardRemove())
        await state.set_state(Registration.bd)


@router.message(F.text == '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ–Ω—É—Å–Ω–æ–º —Å—á–µ—Ç–µ')
async def reg_user(message: types.Message):
    inf = select_card_information(message.from_user.id)
    gift_bonus, string = check_ttl_gift_bonus(inf[2], inf[3])
    await message.answer(f'üí≥<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {inf[0]}\n\n'
                         f'ü§ë<b>–í–∞—à –±–∞–ª–∞–Ω—Å:</b> {"%.2f" % (float(inf[1] + gift_bonus))} –±–∞–ª–ª–æ–≤\n'
                         f'{string}\n'
                         f'<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –ø–æ–∫—É–ø–∫–µ:\n'
                         f'1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å\n'
                         f'–°–ø–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.</i>',
                         parse_mode='HTML',
                         reply_markup=user_keyboards.kb_information)


@router.message(F.text == '–û—Å–Ω–æ–≤–Ω–æ–π –∫–∞–Ω–∞–ª –∏ –∞–∫—Ü–∏–∏')
async def question_user(message: types.Message):
    await message.answer('–í—ã –º–æ–∂–µ—Ç–µ —É–∑–Ω–∞—Ç—å –Ω–∞–ª–∏—á–∏–µ —Ç–æ–≤–∞—Ä–∞\n'
                         '–∏–ª–∏ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –∞–∫—Ü–∏–∏',
                         reply_markup=user_keyboards.ib_channel)


@router.message(F.text == '–ù–∞–π—Ç–∏ –ø–æ–∫—É–ø–∞—Ç–µ–ª—è')
async def admin_start1(message: types.Message, state: FSMContext):
    await message.answer('üîé  –î–ª—è –ø–æ–∏—Å–∫–∞ –≤–≤–µ–¥–∏ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –∫–∞—Ä—Ç—ã', reply_markup=admin_keyboards.kb_cancel)
    await state.set_state(AdminState.number)


@router.message(AdminState.number)
async def admin_start2(message: types.Message, state: FSMContext):
    await state.update_data(number=message.text)
    num = await state.get_data()
    try:
        info = select_user(num['number'])
        gift_bonus, string = check_ttl_gift_bonus(info[5], info[6])
        await message.answer(f'<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∞—Ç–µ–ª–µ:</i>\n\n'
                             f'üë§<b>–ò–º—è:</b> {info[0]}\n'
                             f'üë§<b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> {datetime.strftime(info[7], "%d.%m.%Y")}\n\n'
                             f'üì±<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {info[1]}\n\n'
                             f'üí≥<b>–ù–æ–º–µ—Ä –∫–∞—Ä—Ç—ã:</b> {info[2]}\n\n'
                             f'ü§ë<b>–ë–∞–ª–∞–Ω—Å:</b> {"%.2f" % (float(info[3] + gift_bonus))} –±–∞–ª–ª–æ–≤\n'
                             f'{string}\n'
                             f'<i>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–æ–∫—É–ø–∫–µ:\n'
                             f'1 –±–∞–ª–ª = 1 —Ä—É–±–ª—å\n'
                             f'–°–ø–∏—Å–∞—Ç—å –º–æ–∂–Ω–æ 10% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞,\n'
                             f'–ª–∏–±–æ –Ω–∞—á–∏—Å–ª–∏—Å—Ç—å 5% –æ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ —Ç–æ–≤–∞—Ä–∞.</i>',
                             parse_mode='HTML',
                             reply_markup=admin_keyboards.kb_transaction)
        await state.update_data(number=info)
        await state.set_state(AdminState._pass)
    except Exception:
        await message.answer('‚ùóÔ∏è–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞/–∫–∞—Ä—Ç—ã',
                             reply_markup=admin_keyboards.kb_find)
        await state.set_state(AdminState._pass)


@router.message(F.text == '–°–ø–∏—Å–∞—Ç—å –±–∞–ª–ª—ã')
async def admin_start3(message: types.Message, state: FSMContext):
    try:
        value = await state.get_data()
        bonus = float(value['number'][3])
        gift_bonus = float(value['number'][5])
        assert (bonus + gift_bonus)
        await message.answer('–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏')
    except Exception:
        await message.answer('‚ùóÔ∏è–ë–∞–ª–ª–æ–≤ –Ω–µ—Ç!', reply_markup=admin_keyboards.kb_find)
    await state.set_state(AdminState.minus)


@router.message(AdminState.minus)
async def admin_start4(message: types.Message, state: FSMContext):
    try:
        full_cost = float(message.text)
        percentage = full_cost * 0.1
        value = await state.get_data()
        bonus = float(value['number'][3])
        gift_bonus, string = check_ttl_gift_bonus(gift_bonus=value['number'][5], ttl_gb=value['number'][6])
        check_ttl = True if string else False
        all_bonus = bonus + gift_bonus
        if percentage < all_bonus:
            new_cost = full_cost - percentage
            difference = abs(percentage - gift_bonus)
            if bonus > gift_bonus:
                new_bonus = bonus - difference
                new_gift_bonus = 0
                string = f'–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: <b>{"%.2f" % percentage}</b> –±–∞–ª–ª–æ–≤'
            else:
                new_bonus = bonus
                new_gift_bonus = difference
                string = f'–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ: <b>{"%.2f" % percentage}</b> –ø–æ–¥–∞—Ä–æ—á–Ω—ã—Ö –±–∞–ª–ª–æ–≤!'
        else:
            new_cost = full_cost - all_bonus
            new_bonus = 0
            new_gift_bonus = 0
            string = f'–ë—É–¥–µ—Ç —Å–ø–∏—Å–∞–Ω–æ –±–∞–ª–ª–æ–≤:   <b>{"%.2f" % all_bonus}</b>'
        await state.update_data(adm=message.from_user.id)
        await state.update_data(new_bonus=new_bonus)
        await state.update_data(new_gift_bonus=new_gift_bonus)
        await state.update_data(check_ttl=check_ttl)
        await message.answer(text=f'–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏: <b>{"%.2f" % new_cost}</b>\n'
                                  f'{string}\n\n'
                                  f'‚ùóÔ∏è–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ–∫—É–ø–∞—Ç–µ–ª—è!',
                             parse_mode='HTML')
        await user_bot.send_message(chat_id=value['number'][4],
                                    text=f'–ù–æ–≤–∞—è —Ü–µ–Ω–∞ –ø–æ–∫—É–ø–∫–∏:   <b>{"%.2f" % new_cost}</b>\n'
                                         f'{string}\n\n'
                                         f'‚ùóÔ∏è–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —Å–ø–∏—Å–∞–Ω–∏–µ?',
                                    parse_mode='HTML',
                                    reply_markup=admin_keyboards.kb_bool)
        await state.set_state(AdminState._pass)
    except Exception:
        await message.answer('‚ùóÔ∏è–ù–µ–≤–µ—Ä–Ω–æ –≤–≤–µ–¥–µ–Ω–∞ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏', reply_markup=admin_keyboards.kb_find)
        await state.set_state(AdminState._pass)


@router.message(F.text == '–î–∞')
async def admin_start5(message: types.Message, state: FSMContext):
    value = await state.get_data()
    adm_id = value['adm']
    bonus = value['new_bonus']
    gift_bonus = value['new_gift_bonus']
    card = value['number'][2]
    check_ttl = value['check_ttl']
    ttl_gb = value['number'][6]
    string = f'\n‚ùóÔ∏è–£—Å–ø–µ–π—Ç–µ –ø–æ—Ç—Ä–∞—Ç–∏—Ç—å –±–æ–Ω—É—Å–Ω—ã–µ –±–∞–ª–ª—ã –¥–æ ' \
             f'<b>{datetime.strftime(ttl_gb, "%d.%m.%Y")}</b>!\n' if check_ttl else ''
    update_bonus(bonus, gift_bonus, card)
    await message.answer(f'‚ùóÔ∏è–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã!'
                         f'{string}',
                         parse_mode='HTML',
                         reply_markup=user_keyboards.kb_information)
    await user_bot.send_message(chat_id=adm_id,
                                text='‚ùóÔ∏è–ë–∞–ª–ª—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏—Å–∞–Ω—ã!', reply_markup=admin_keyboards.kb_find)
    await state.set_state(AdminState._pass)


@router.message(F.text == '–ù–µ—Ç')
async def admin_start6(message: types.Message, state: FSMContext):
    value = await state.get_data()
    adm_id = value['adm']
    await message.answer('‚ùóÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=user_keyboards.kb_information)
    await user_bot.send_message(chat_id=adm_id, text='‚ùóÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=admin_keyboards.kb_find)
    await state.set_state(AdminState._pass)


@router.message(F.text == '–ù–∞—á–∏—Å–ª–∏—Ç—å –±–∞–ª–ª—ã')
async def admin_start7(message: types.Message, state: FSMContext):
    await message.answer('–í–≤–µ–¥–∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–∫—É–ø–∫–∏')
    await state.set_state(AdminState.add)


@router.message(F.text == '–û—Ç–º–µ–Ω–∏—Ç—å –æ–ø–µ—Ä–∞—Ü–∏—é')
async def admin_start7(message: types.Message, state: FSMContext):
    await message.answer(f'‚ùóÔ∏è–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞!', reply_markup=admin_keyboards.kb_find)
    await state.set_state(AdminState._pass)


@router.message(AdminState.add)
async def admin_start8(message: types.Message, state: FSMContext):
    cost = float(message.text)
    percentage = cost * 0.05
    value = await state.get_data()
    card = value['number'][2]
    bonus = float(value['number'][3])
    gift_bonus, string = check_ttl_gift_bonus(gift_bonus=value['number'][5], ttl_gb=value['number'][6])
    new_bonus = bonus + percentage
    update_bonus(new_bonus, gift_bonus, card)
    await user_bot.send_message(chat_id=value['number'][4],
                                text=f'‚ùóÔ∏è{"%.2f" % (new_bonus - bonus)} '
                                     f'–±–∞–ª–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –Ω–∞ –í–∞—à –±–æ–Ω—É—Å–Ω—ã–π —Å—á–µ—Ç!\n\n'
                                     f'ü§ë–ë–∞–ª–ª–∞–Ω—Å: {new_bonus + gift_bonus} –±–∞–ª–ª–æ–≤.\n\n'
                                     f'{string}\n',
                                parse_mode='HTML',
                                reply_markup=user_keyboards.kb_information)
    await message.answer(f'‚ùóÔ∏è{"%.2f" % (new_bonus - bonus)} –±–∞–ª–ª–æ–≤ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã –ø–æ–∫—É–ø–∞—Ç–µ–ª—é {value["number"][0]}!',
                         reply_markup=admin_keyboards.kb_find)
    await state.set_state(AdminState._pass)
